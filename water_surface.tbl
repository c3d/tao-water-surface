// *****************************************************************************
// water_surface.tbl                                               Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the "water_surface" module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2012-2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2013, Catherine Burvelle <catherine@taodyne.com>
// (C) 2012-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2012-2013, Jérôme Forissier <jerome@taodyne.com>
// (C) 2012-2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

#include "water_factory.h"

PREFIX(WaterStrength,  tree, "water_strength",
       PARM(n, text, "The name of the water"),
       return WaterFactory::water_strength(n),
       GROUP(module.WaterSurface)
       SYNOPSIS("Return stength of a water")
       DESCRIPTION("Show a water"))
PREFIX(WaterShow,  tree, "water_show",
       PARM(n, text, "The name of the water"),
       return WaterFactory::water_show(n),
       GROUP(module.WaterSurface)
       SYNOPSIS("Show a water")
       DESCRIPTION("Show a water"))
PREFIX(WaterOnly,  tree, "water_only",
       PARM(n, text, "The name of the water to preserve"),
       return WaterFactory::water_only(n),
       GROUP(module.WaterSurface)
       SYNOPSIS("Purge all waters but one.")
       DESCRIPTION("Purge all waters but one."))
PREFIX(WaterRemove,  tree, "water_remove",
       PARM(n, text, "the name of the water to remove"),
       return WaterFactory::water_remove(n),
       GROUP(module.WaterSurface)
       SYNOPSIS("Remove a water.")
       DESCRIPTION("Removes all data structures for a water."))
PREFIX(WaterExtenuation,  tree, "water_extenuation",
       PARM(n, text, )
       PARM(r, real, ),
       return WaterFactory::water_extenuation(n, r),
       GROUP(module.WaterSurface)
       SYNOPSIS("Set extenuation of a water surface")
       DESCRIPTION("Set extenuation of a water surface"))
PREFIX(AddDrop,  tree, "add_drop",
       PARM(n, text, )
       PARM(x, real, )
       PARM(y, real, )
       PARM(r, real, )
       PARM(s, real, ),
       return WaterFactory::add_drop(n, x, y, r, s),
       GROUP(module.WaterSurface)
       SYNOPSIS("Add a drop to a water")
       DESCRIPTION("Add a drop to a water"))
PREFIX(AddRandomDrops,  tree, "add_random_drops",
       PARM(t, text, )
       PARM(n, integer, ),
       return WaterFactory::add_random_drops(t, n),
       GROUP(module.WaterSurface)
       SYNOPSIS("Add some random drops to a water")
       DESCRIPTION("Add some random drops to a water"))

